{"version":3,"sources":["Components/Nav/Nav.js","Components/Topbar/Topbar.js","Components/PrivateRoute/index.js","Components/Button/Button.js","Libs/api/api.js","Libs/api/users.js","Redux/users.js","Components/LoginForm/LoginForm.js","Views/Login/Login.js","App.js","Redux/store.js","serviceWorker.js","index.js","Components/Button/Button.module.css"],"names":["Nav","to","Topbar","Component","render","className","PrivateRoute","component","authenticated","rest","props","pathname","state","from","location","console","log","styles","memo","id","type","onClick","label","button","v1Api","create","baseURL","process","headers","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","getUserTokenFromCookie","authenticateUser","username","pw","a","post","resp","ok","data","error","problem","user","initialState","LoginForm","constructor","super","handleUsernameChange","this","setState","usernameInputRef","current","value","handlePwChange","pwInputRef","handleSubmit","e","preventDefault","setActiveUser","createRef","htmlFor","placeholder","onChange","ref","connect","users","dispatch","Login","React","Home","PrivatePage","App","path","exact","reducers","combineReducers","action","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","hostname","match","ReactDOM","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.969a7f20.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport function Nav () {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to='/'>Home</Link>\n        </li>\n        <li>\n          <Link to='/private'>Private</Link>\n        </li>\n        <li>\n          <Link to='/login/'>Login</Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n","import React, { Component } from 'react'\nimport { Nav } from 'Components/Nav/Nav'\n\nclass Topbar extends Component {\n  render () {\n    return (\n      <div className={'topbar'}>\n        Topbar\n        <Nav />\n      </div>\n    )\n  }\n}\n\nexport default Topbar\n","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\nfunction PrivateRoute ({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === true\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n\nexport default PrivateRoute\n","import styles from './Button.module.css'\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconsole.log(styles)\nconst Button = ({ id, type = 'button', onClick, label = 'no label set...' }) => {\n  return (\n    <div className={styles['button-container']}>\n      <button id={id} className={styles.button} type={type} onClick={onClick}>{label}</button>\n    </div>\n  )\n}\n\nButton.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string,\n  onClick: PropTypes.func\n}\n\n// names and memo'd export to allow proper unit testing with enzyme https://github.com/airbnb/enzyme/issues/1875\nexport { Button }\nexport default memo(Button)\n","import { create } from 'apisauce'\nconst COOKIE_NAME = 'token='\n// define the api\n\nexport const v1Api = create({\n  baseURL: process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : process.env.REACT_APP_API_ENDPOINT,\n  headers: {\n    'x-user-token': getUserTokenFromCookie()\n  }\n})\n\n/**\n * Response Transform:\n * This is our hook into all responses from our API. We can use this to ensure we get consistent data responses across our app.\n */\n// v1Api.addResponseTransform(response => {})\n\n/**\n * Export to allow unit testing\n * @returns {string}\n */\nexport function getUserTokenFromCookie () {\n  let decodedCookie = decodeURIComponent(document.cookie)\n  let ca = decodedCookie.split(';')\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i]\n    while (c.charAt(0) === ' ') c = c.substring(1)\n    if (c.indexOf(COOKIE_NAME) === 0) return c.substring(COOKIE_NAME.length, c.length)\n  }\n  return ''\n}\n","import { v1Api } from 'Libs/api/api'\n\n/**\n * Expect a rtetutn object of {user: {id, name}}\n * @param username\n * @param pw\n * @returns {Promise<*>}\n */\nexport async function authenticateUser (username, pw) {\n  const endpoint = `/api/v1/users/authenticate`\n  const resp = await v1Api.post(endpoint, { username, pw })\n  if (resp.ok) return resp.data\n  else {\n    console.error(resp.problem)\n    return { user: null }\n  }\n}\n","const initialState = {\n  user: null\n}\n\n/*\n * Types\n */\nconst SET_ACTIVE_USER = 'Users/SET_ACTIVE_USER'\nconst REMOVE_ACTIVE_USER = 'Users/REMOVE_ACTIVE_USER'\n\n/*\n * Actions\n */\nexport function setActiveUser (user) {\n  return { type: SET_ACTIVE_USER, user }\n}\n\nexport function removeActiveUser () {\n  return { type: REMOVE_ACTIVE_USER }\n}\n\n/*\n * Reducer\n */\nexport default function UsersReducer (state = initialState, action) {\n  switch (action.type) {\n    case SET_ACTIVE_USER: {\n      return {\n        ...state,\n        user: { ...action.user }\n      }\n    }\n    case REMOVE_ACTIVE_USER: {\n      return {\n        ...state,\n        user: null\n      }\n    }\n    default:\n      return state\n  }\n}\n","import React, { Component, createRef } from 'react'\nimport Button from 'Components/Button/Button'\nimport { authenticateUser } from 'Libs/api/users'\nimport { setActiveUser } from 'Redux/users'\nimport { connect } from 'react-redux'\n\nclass LoginForm extends Component {\n  constructor (props) {\n    super(props)\n    this.usernameInputRef = createRef()\n    this.pwInputRef = createRef()\n    this.state = {\n      username: '',\n      pw: ''\n    }\n  }\n\n  handleUsernameChange = () => this.setState({ username: this.usernameInputRef.current.value })\n  handlePwChange = () => this.setState({ pw: this.pwInputRef.current.value })\n  handleSubmit = async (e) => {\n    e.preventDefault()\n    const resp = await authenticateUser(this.state.username, this.state.pw)\n    if (resp) this.props.setActiveUser(resp)\n    console.log(resp)\n  }\n\n  render () {\n    return (\n      <div className={'login-form'}>\n        <div className='input-group'>\n          <label htmlFor='username'>Username</label>\n          <input id={'username'} type={'email'} placeholder={'Some text'} onChange={this.handleUsernameChange} value={this.state.username} ref={this.usernameInputRef} />\n        </div>\n        <div className='input-group'>\n          <label htmlFor='pw'>Password</label>\n          <input id={'pw'} type={'password'} placeholder={'Password'} onChange={this.handlePwChange} value={this.state.pw} ref={this.pwInputRef} />\n        </div>\n        <Button type={'submit'} onClick={this.handleSubmit} label={'Submit'} />\n      </div>\n    )\n  }\n}\n\n// gives our component access to state through props.users\nfunction mapStateToProps (state) {\n  return {\n    users: state.users\n  }\n}\n\n// here we're mapping actions to props\nfunction mapDispatchToProps (dispatch) {\n  return {\n    setActiveUser: (username, pw) => dispatch(setActiveUser(username, pw))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoginForm)\n","import React from 'react'\nimport LoginForm from 'Components/LoginForm/LoginForm'\n\nclass Login extends React.Component {\n  render () {\n    return (\n      <div className='home-container'>\n        <LoginForm />\n      </div>\n    )\n  }\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Topbar from 'Components/Topbar/Topbar'\nimport PrivateRoute from 'Components/PrivateRoute'\nimport Login from 'Views/Login/Login'\nimport './style.scss'\n\nconst Home = () => <h2>Homepage</h2>\nconst PrivatePage = () => <h2>Private</h2>\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <div className={'main-container'}>\n          <Topbar />\n          <Route path='/' exact component={Home} />\n          <Route path='/login/' component={Login} />\n          <PrivateRoute path='/private' authenticated={false} component={PrivatePage} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","import { createStore, combineReducers } from 'redux'\nimport users from './users'\n\nconst reducers = combineReducers({\n  users\n})\n\nexport default createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from 'Redux/store'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__uv1mz\"};"],"sourceRoot":""}